residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(2,1,1), seasonal = c(1,0,1))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(2,1,2), seasonal = c(1,1,1))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(2,1,2), seasonal = c(1,1,2))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(3,1,3), seasonal = c(1,1,1))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(3,1,1), seasonal = c(1,1,1))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.lm.trend.season = tslm(train.ts ~ trend +I(trend^2) + season)
train.lm.trend.season.pred = forecast(train.lm.trend.season, h = nvalid, level = 0)
train.res.arima = Arima(train.lm.trend.season$residuals, order = c(10,1,1), seasonal = c(1,1,1))
# seasonal = c(1,0,0), P =1, consider the lag-12
train.res.arima.pred = forecast(train.res.arima, h = nvalid, level = 0 )
residuals_valid = valid.ts-train.lm.trend.season.pred$mean
plot(train.res.arima.pred, ylab = "residuals", xlab = "time", bty = "l", xaxt = "n", main = "", col = 'black')
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(train.res.arima$fitted, lwd = 1, col = 'blue')
lines(residuals_valid, col = 'grey')
par(mfrow = c(1,2))
Acf(train.res.arima$residuals)
Pacf(train.res.arima$residuals)
train.arima = Arima(train.ts, order = c(10,1,1), seasonal = c(1,1,1))
summary(train.arima)
train.arima.pred = forecast(train.arima, h = nvalid)
plot(train.arima.pred, main = "ARIMA model using original data", bty = "l", xlim = c(1982,2015), ylab = "Housing Start", xaxt = "n")
lines(valid.ts)
lines(train.arima.pred$fitted, col = "blue", lwd = 2)
train.arima.pred = forecast(train.arima, h = nvalid, level = 0)
plot(train.arima.pred, main = "ARIMA model using original data", bty = "l", xlim = c(1982,2015), ylab = "Housing Start", xaxt = "n")
lines(valid.ts)
lines(train.arima.pred$fitted, col = "blue", lwd = 2)
train.auto.pred = forecast(auto.arima, h = nvalid, level = 0)
train.auto.pred = forecast(train.auto, h = nvalid, level = 0)
plot(train.auto.pred, main = "ARIMA model using original data", bty = "l", xlim = c(1982,2015), ylab = "Housing Start", xaxt = "n")
lines(valid.ts)
lines(train.auto.pred$fitted, col = "blue", lwd = 2)
train.arima = Arima(train.ts, order = c(10,1,2), seasonal = c(1,1,1))
summary(train.arima)
train.arima.pred = forecast(train.arima, h = nvalid, level = 0)
plot(train.arima.pred, main = "ARIMA model using original data", bty = "l", xlim = c(1982,2015), ylab = "Housing Start", xaxt = "n")
lines(valid.ts)
lines(train.arima.pred$fitted, col = "blue", lwd = 2)
library(zoo)
library(forecast)
library(ggplot2)
df = read.csv("data.csv")  # PrivateHousingStarts
data = ts(df$Private.Housing.Starts, start = c(1982,08), frequency = 12)
ma.trailing = rollmean(data, k = 12, align = "right")
ma.center = ma(data, order = 12)   ## ma is in forecast library
plot(data, ylim = c(50,300) ,bty = "l", xaxt = "n", xlim = c(1982, 2015),main = "")
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(ma.center, lwd = 2)
lines(ma.trailing, lwd = 2, lty = 2)
legend(1996,300,c("Private Housing Starts","Centered Moving Average", "Trailing Moving Average"), lty = c(1,1,2), lwd = c(1,2,2), bty= "n")
nvalid = 48
ntrain = length(data) - nvalid
train.ts = window(data, start = c(1982,08), end = c(1982, ntrain))
valid.ts = window(data, start = c(1982, ntrain+1), end = c(1982, ntrain+nvalid))
ma.trailing = rollmean(train.ts, k = 12, align = "right")
last.ma = tail(ma.trailing,1)
ma.trailing.pred = ts(rep(last.ma, nvalid), start = c(1982, ntrain+1),end = c(1982, ntrain+nvalid),frequency = 12)
plot(train.ts, xlab = "Time", bty = "l", xaxt = "n",xlim = c(1982, 2015))
axis(1,at = seq(1983, 2015,1), labels = format(seq(1983, 2015,1)))
lines(ma.trailing, lwd = 2, col = 'blue')
lines(ma.trailing.pred, lwd = 2, col = "blue", lty=2)
lines(valid.ts)
total = nrow(df)
df["First"] = 0
df["Second"] = 0
for(i in 13:total){
df[i,3] = df[i,2] - df[i-12,2]
}
for(i in 14:total){
df[i,4] = df[i,3] - df[i-1,3]
}
twice = ts(df$Second[14:total], start = c(1983,9), frequency = 12)
autoplot(twice)
diff.twice.ts = diff(diff(data, lag = 12), lag = 1)
nvalid = 36
ntrain = length(diff.twice.ts) - nvalid
train.ts = window(diff.twice.ts, start = c(1983,9), end = c(1983,ntrain+1))
valid.ts = window(diff.twice.ts, start = c(1983,9), end = c(1983, ntrain+1+nvalid))
ses = ets(train.ts, model = "ANN", alpha = 0.2)
ses.pred = forecast(ses, h = nvalid, level = 1)
ses.pred
plot(ses.pred, bty = "l", xaxt = "n", main = "", flty = 2)
axis(1, at = seq(1983,2015,1), labels = format(seq(1983,2015,1)))
lines(ses.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
diff.twice.ts = diff(diff(data, lag = 12), lag = 1)
nvalid = 36
ntrain = length(diff.twice.ts) - nvalid
train.ts = window(diff.twice.ts, start = c(1983,9), end = c(1983,ntrain+1))
valid.ts = window(diff.twice.ts, start = c(1983,9), end = c(1983, ntrain+1+nvalid))
ses = ets(train.ts, model = "ANN", alpha = 0.2)
ses.pred = forecast(ses, h = nvalid, level = 1)
plot(ses.pred, bty = "l", xaxt = "n", main = "", flty = 2)
axis(1, at = seq(1983,2015,1), labels = format(seq(1983,2015,1)))
lines(ses.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
ses.opt = ets(train.ts, model = "ANN")
ses.opt.pred = forecast(ses.opt, h = nvalid, level=1)
ses.opt
accuracy(ses.pred,valid.ts)
accuracy(ses.opt.pred,valid.ts)
nvalid = 48
ntrain = length(data) - nvalid
train.ts = window(data, start = c(1982,08), end = c(1982, ntrain))
valid.ts = window(data, start = c(1982, ntrain+1), end = c(1982, ntrain+nvalid))
hwin = ets(train.ts, model = "MAA")
hwin.pred = forecast(hwin, h = nvalid, level = 0)
plot(hwin.pred, bty = "l", xaxt = "n", main="", flty = 12)
axis(1, at = seq(1983,2019,1), labels = format(seq(1983,2019,1)))
lines(hwin.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
hwin
auto = ets(train.ts, model = "ZZZ")
auto.pred = forecast(auto, h = nvalid, level = 0)
plot(auto.pred, bty = "l", xaxt = "n", main="", flty = 12)
axis(1, at = seq(1983,2019,1), labels = format(seq(1983,2019,1)))
lines(auto.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
bike.hourly.df = read.csv("BikeSharingHourly.csv")
ntotal = length(bike.hourly.df$cnt[13004:13747])
bike.hourly.msts = msts(bike.hourly.df$cnt[13004:13747], seasonal.periods = c(24,168), start = c(0,1))
ntain = 21*24
nvalid =ntotal - ntrain
ytrain.msts = window(bike.hourly.msts, start = c(0,1), end = c(0,ntrain))
yvalid.msts = window(bike.hourly.msts, start = c(0, ntrain+1), end = c(0,ntotal))
bike.hourly.dshw.pred = dshw(ytrain.msts, h = nvalid)
##  These two means are equal : bike.hourly.dshw.pred$mean - bike.hourly.dshw.pred.mean
bike.hourly.dshw.pred.mean = msts(bike.hourly.dshw.pred$mean, seasonal.periods = c(24,168), start = c(0, ntrain+1))
accuracy(bike.hourly.dshw.pred.mean, yvalid.msts)
plot(ytrain.msts, xlim = c(0,4+3/7), xlab = "week", ylab = "Hourly Bike Rentals")
lines(bike.hourly.dshw.pred.mean, lwd = 2, col = "blue")
lines(yvalid.msts, lwd = 1, col = "red")
lines(bike.hourly.dshw.pred$fitted, lwd = 2, col = "blue")
bike.daily.df = read.csv("BikeSharingDaily.csv")
bike.daily.msts = msts(bike.daily.df$cnt, seasonal.periods = c(7, 365.25))
bike.daily.tbats = tbats(bike.daily.msts)
bike.daily.tbats.pred = forecast(bike.daily.tbats, h = 365)
bike.daily.stlm = stlm(bike.daily.msts, s.window = "periodic", method = "ets")
bike.daily.stlm.pred = forecast(bike.daily.stlm,h = 365)
par(mfrow = c(1,2))
plot(bike.daily.tbats.pred, ylim = c(0,9000) ,xlab = "Year", ylab = "Daily Bike Rentals", main = "TBATS")
plot(bike.daily.stlm.pred, ylim = c(0,9000) ,xlab = "Year", ylab = "Daily Bike Rentals", main = "STL + ETS")
library(lubridate)
bike.df = read.csv("BikeSharingDaily.csv")
library(lubridate)
bike.df = read.csv("BikeSharingDaily.csv")
bike.df$Date =  as.Date(bike.df$dteday, format = "%Y-%m-%d")
bike.df$Month = month(bike.df$Date, label = T)
bike.df$DOW = wday(bike.df$Date, label = T)
bike.df$WorkingDat = factor(bike.df$workingday, levels = c(0,1), labels = c("not_working","working"))
bike.df$Weather = factor(bike.df$weathersit, levels = c(1,2,3), labels = c("clear","mist","rain_snow"))
month.dummies = model.matrix(~0+Month, data = bike.df)
dow.dummies = model.matrix(~0 + DOW< data = bike.df)
month.dummies = model.matrix(~0+Month, data = bike.df)
dow.dummies = model.matrix(~0 + DOW, data = bike.df)
workingday_weather.dummies = model.matrix(~0 +WorkingDay:Weather, data = bike.df)
library(lubridate)
bike.df = read.csv("BikeSharingDaily.csv")
bike.df$Date =  as.Date(bike.df$dteday, format = "%Y-%m-%d")
bike.df$Month = month(bike.df$Date, label = T)
bike.df$DOW = wday(bike.df$Date, label = T)
bike.df$WorkingDay = factor(bike.df$workingday, levels = c(0,1), labels = c("not_working","working"))
bike.df$Weather = factor(bike.df$weathersit, levels = c(1,2,3), labels = c("clear","mist","rain_snow"))
month.dummies = model.matrix(~0+Month, data = bike.df)
dow.dummies = model.matrix(~0 + DOW, data = bike.df)
workingday_weather.dummies = model.matrix(~0 +WorkingDay:Weather, data = bike.df)
View(dow.dummies)
View(dow.dummies)
View(month.dummies)
month.dummies = model.matrix(~0+Month, data = bike.df)
dow.dummies = model.matrix(~0 + DOW, data = bike.df)
workingday_weather.dummies = model.matrix(~0 +WorkingDay:Weather, data = bike.df)
colnames(month.dummies) = gsub("Month", "", colnames(month.dummies))
colnames(dow.dummies) = gsub("DOW", "", colnames(dow.dummies))
colnames(workingday_weather.dummies) = gsub("WorkingDay","", colnames(workingday_weather.dummies))
colnames(workingday_weather.dummies) = gsub("Weather","", colnames(workingday_weather.dummies))
colnames(workingday_weather.dummies) = gsub(":","", colnames(workingday_weather.dummies))
View(workingday_weather.dummies)
x = as.data.frame(cbind(month.dummies[,-12],dow.dummies[,-7], workingday_weather.dummies[,-6]))
y = bike.df$cnt
ntotal = length(y)
nvalid = 90
ntrain = ntotal-nvalid
xtrain = x[1:ntrain]
x = as.data.frame(cbind(month.dummies[,-12],dow.dummies[,-7], workingday_weather.dummies[,-6]))
y = bike.df$cnt
ntotal = length(y)
nvalid = 90
ntrain = ntotal-nvalid
xtrain = x[1:ntrain,]
ytrain = y[1:nrain]
x = as.data.frame(cbind(month.dummies[,-12],dow.dummies[,-7], workingday_weather.dummies[,-6]))
y = bike.df$cnt
ntotal = length(y)
nvalid = 90
ntrain = ntotal-nvalid
xtrain = x[1:ntrain,]
ytrain = y[1:ntrain]
xvalid = x[(ntrain+1):ntotal,]
yvalid = y[(ntrain+1):ntotal]
ytrain.ts = ts(ytrain)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
library(forecast)
library(ggplot2)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid), col = "grey")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
View(x)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend + I(trend)^2 + I(trend^3)",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend + I(trend^2) + I(trend^3)",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend","I(trend^2)","I(trend^3)",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend","I(trend^2)",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
summary(bike.tslm)
paste("ytrain.ts", paste(c("trend","I(trend^2)","I(trend^3)",colnames(xtrain)), collapse = "+"), sep = "~")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(ytrain.ts~trend+I(trend^2)+I(trend^3)+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Sun+Mon+Tue+Wed+Thu+Fri+not_workingclear+workingclear+not_workingmist+workingmist+not_workingrain_snow, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(ytrain.ts~trend+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Sun+Mon+Tue+Wed+Thu+Fri+not_workingclear+workingclear+not_workingmist+workingmist+not_workingrain_snow, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
ytrain.ts = ts(ytrain)
formula = as.formula(paste("ytrain.ts", paste(c("trend",colnames(xtrain)), collapse = "+"), sep = "~"))
bike.tslm = tslm(formula, data = xtrain, lambda = 1)
bike.tslm.pred = forecast(bike.tslm, newdata = xvalid, level = 0)
plot(bike.tslm.pred, ylim = c(0,9000), xlab = "days", ylab = "Daily Bike rentals")
lines(ts(yvalid, start = ntrain+1), col = "grey")
one = read.csv("warlmart_train.csv")
one = read.csv("walmart_train.csv")
ntrain = 143
View(one)
one = read.csv("walmart_train.csv")
ntrain = 143
ytrain.ts = ts(one$Weekly_Sales[1:ntrain], frequency = 52, start = c(2011,5))
stl.run = stl(ytrain.ts, s.window = "periodic") # periodic means that seasonal will be identical over the years
stl.run = stl(ytrain.ts, s.window = "periodic") # periodic means that seasonal will be identical over the years
plot(stl.run)
xtrain = data.frame(IsHoliday = one$IsHoliday[1:ntrain])
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
int(1)
integer(F)
integer(FALSE)
FALSE+TRUE
is.factor(c(FALSE, TRUE))
holiday.factor = factor(one$IsHoliday[1:ntrain], levels = c(0,1), labels = c(FALSE,TRUE))
holiday.dummies = model.matrix(0+holiday.factor)
holiday.factor = factor(one$IsHoliday[1:ntrain], levels = c(0,1), labels = c(FALSE,TRUE))
holiday.dummies = model.matrix(~0+holiday.factor)
xtrain = data.frame(holiday.dummies)
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
View(holiday.dummies)
one$IsHoliday = as.character(one$IsHoliday)
holiday.factor = factor(one$IsHoliday[1:ntrain], levels = c(0,1), labels = c(FALSE,TRUE))
holiday.dummies = model.matrix(~0+holiday.factor)
xtrain = data.frame(holiday.dummies)
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
one$IsHoliday = as.character(one$IsHoliday)
holiday.factor = factor(one$IsHoliday[1:ntrain], levels = c(0,1), labels = c("FALSE","TRUE"))
holiday.dummies = model.matrix(~0+holiday.factor)
xtrain = data.frame(holiday.dummies)
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
holiday.factor
View(bike.df)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TURE", 0, one$holiday_factor)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TURE", 1, one$holiday_factor)
View(one)
one$holiday_factor_2 = gsub("TURE", 1, one$holiday_factor)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one = read.csv("walmart_train.csv")
ntrain = 143
ytrain.ts = ts(one$Weekly_Sales[1:ntrain], frequency = 52, start = c(2011,5))
stl.run = stl(ytrain.ts, s.window = "periodic") # periodic means that seasonal will be identical over the years
plot(stl.run)
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one$holiday_factor = as.integer(one$holiday_factor)
xtrain = data.frame(IsHoliday = one$holiday_factor[1:ntrain])
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
View(xtrain)
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one$holiday_factor = as.integer(one$holiday_factor)
xtrain = model.matrix(IsHoliday = one$holiday_factor[1:ntrain])
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one$holiday_factor = as.integer(one$holiday_factor)
xtrain = model.matrix(one$holiday_factor[1:ntrain])
?model.matrix
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one$holiday_factor = as.integer(one$holiday_factor)
one$holiday_factor = factor(one$holiday_factor, levels = c(0,1), labels = c("False","True"))
xtrain = model.matrix(~0+holiday_factor, data = one)
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
View(xtrain)
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = gsub("FALSE", 0, one$IsHoliday)
one$holiday_factor = gsub("TRUE", 1, one$holiday_factor)
one$holiday_factor = as.integer(one$holiday_factor)
one$holiday_factor = factor(one$holiday_factor, levels = c(0,1), labels = c("False","True"))
xtrain = model.matrix(~0+holiday_factor, data = one)[1:ntrain,]
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
stlm.reg.fit$model
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = ifelse(one$IsHoliday == "TRUE",1,0)
xtrain = data.frame(isHoliday = one$holiday_factor[1:ntrain])
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
View(xtrain)
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = ifelse(one$IsHoliday == "TRUE",1,0)
xtrain = one$holiday_factor[1:ntrain]
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
stlm.reg.fit$model
one = read.csv("walmart_train.csv")
ntrain = 143
ntest = 39
ytrain.ts = ts(one$Weekly_Sales[1:ntrain], frequency = 52, start = c(2011,5))
ytest.ts = ts(one$Weekly_Sales[ntrain+1:ntest], frequency =52, start = c(2011, 5+ntrain+1))
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = ifelse(one$IsHoliday == "TRUE",1,0)
xtrain = one$holiday_factor[1:ntrain]
xtest = one$holiday_factor[(ntrain+1):(ntrain+ntest)]
stl.run = stl(ytrain.ts, s.window = "periodic") # periodic means that seasonal will be identical over the years
plot(stl.run)
seasonal.comp = stl.run$time.series[,1]
deseasonalized.ts = ytrain.ts - seasonal.comp
seasadj(stl.run)
arima.fit.deas = auto.arima(deseasonalized.ts, xreg = xtrain)
arima.fit.deas.pred = forecast(arima.fit.deas, xreg = xtest, h = ntest, level = 0)
seasonal.comp.pred = snaive(seasonal.comp, h = ntest)
alt.forecast = arima.fit.deas.pred$mean + seasonal.comp.pred$mean
seasonal.comp = stl.run$time.series[,1]
deseasonalized.ts = ytrain.ts - seasonal.comp
arima.fit.deas = auto.arima(deseasonalized.ts, xreg = xtrain)
arima.fit.deas.pred = forecast(arima.fit.deas, xreg = xtest, h = ntest, level = 0)
seasonal.comp.pred = snaive(seasonal.comp, h = ntest)
alt.forecast = arima.fit.deas.pred$mean + seasonal.comp.pred$mean
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
stlm.reg.fit$model
stlm.reg.pred = forecast(stlm.reg.fit, h = ntest)
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest)
stlm.reg.pred$mean = alt.forecast
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest)
stlm.reg.pred$mean = alt.forecast
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest)
stlm.reg.pred$mean - alt.forecast
plot(stlm.reg.pred, xlab = "year", ylab = "weekly sales")
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest, level = 0)
stlm.reg.pred$mean - alt.forecast  ### these two method are the same!
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest, level = 0)
stlm.reg.pred$mean - alt.forecast  ### these two method are the same!
plot(stlm.reg.pred, xlab = "year", ylab = "weekly sales")
lines(ytest.ts, col = 'grey')
ytest.ts
ytrain.ts
View(one)
one = read.csv("walmart_train.csv")
ntrain = 143
ntest = 39
ytrain.ts = ts(one$Weekly_Sales[1:ntrain], frequency = 52, start = c(2011,5))
ytest.ts = ts(one$Weekly_Sales[ntrain+1:ntest], frequency =52, start = c(2011, 5+ntrain+1))
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = ifelse(one$IsHoliday == "TRUE",1,0)
xtrain = one$holiday_factor[1:ntrain]
xtest = one$holiday_factor[(ntrain+1):(ntrain+ntest)]
View(one)
plot(stlm.reg.pred, xlab = "year", ylab = "weekly sales")
lines(ytest.ts, col = 'grey')
one = read.csv("walmart_train.csv")
ntrain = 143
ntest = 39
ytrain.ts = ts(one$Weekly_Sales[1:ntrain], frequency = 52, start = c(2011,5))
ytest.ts = ts(one$Weekly_Sales[ntrain+1:ntest], frequency =52, start = c(2011, 5+ntrain))
one$IsHoliday = as.character(one$IsHoliday)
one$holiday_factor = ifelse(one$IsHoliday == "TRUE",1,0)
xtrain = one$holiday_factor[1:ntrain]
xtest = one$holiday_factor[(ntrain+1):(ntrain+ntest)]
stl.run = stl(ytrain.ts, s.window = "periodic") # periodic means that seasonal will be identical over the years
plot(stl.run)
seasonal.comp = stl.run$time.series[,1]
deseasonalized.ts = ytrain.ts - seasonal.comp
arima.fit.deas = auto.arima(deseasonalized.ts, xreg = xtrain)
arima.fit.deas.pred = forecast(arima.fit.deas, xreg = xtest, h = ntest, level = 0)
seasonal.comp.pred = snaive(seasonal.comp, h = ntest)
alt.forecast = arima.fit.deas.pred$mean + seasonal.comp.pred$mean
stlm.reg.fit = stlm(ytrain.ts, s.window = "periodic", xreg = xtrain, method = "arima")
stlm.reg.fit$model
stlm.reg.pred = forecast(stlm.reg.fit, newxreg = xtest, h = ntest, level = 0)
stlm.reg.pred$mean - alt.forecast  ### these two method are the same!
plot(stlm.reg.pred, xlab = "year", ylab = "weekly sales")
lines(ytest.ts, col = 'grey')
